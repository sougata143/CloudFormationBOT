version: '3.8'

services:
  # Backend Microservice
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    image: cloudformation-backend:latest
    container_name: backend-microservice
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - DB_HOST=database
      - DB_PORT=5432
      - DB_SERVICE=cloudformationdb
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    depends_on:
      - database
      - redis
    networks:
      - microservices-network
    volumes:
      - backend-logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Angular Application
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    image: cloudformation-frontend:latest
    container_name: frontend-application
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Service (Oracle)
  database:
    image: container-registry.oracle.com/database/enterprise:19.3.0.0
    container_name: oracle-database
    ports:
      - "1521:1521"
    environment:
      - ORACLE_SID=CLOUDFORMATIONDB
      - ORACLE_PDB=CLOUDFORMATIONPDB
      - ORACLE_PWD=${ORACLE_DATABASE_PASSWORD}
    volumes:
      - oracle-data:/opt/oracle/oradata
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sqlplus", "-L", "system/${ORACLE_DATABASE_PASSWORD}@localhost/CLOUDFORMATIONPDB"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Session Management
  redis:
    image: redis:6.2-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - microservices-network
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Jenkins CI/CD Server
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins-server
    ports:
      - "8090:8080"
      - "50000:50000"
    volumes:
      - jenkins-data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - microservices-network
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - microservices-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-dashboard
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - microservices-network
    restart: unless-stopped

networks:
  microservices-network:
    driver: bridge

volumes:
  backend-logs:
  oracle-data:
  redis-data:
  jenkins-data:
  prometheus-data:
  grafana-data: